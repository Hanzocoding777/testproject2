import logging
import os
import re
import asyncio

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
from pyrogram import Client
from pyrogram.enums import ParseMode

# –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from database import Database
from admin_handlers import admin_command, admin_teams_list, handle_team_action, admin_teams_menu, process_comment, cancel_comment, admin_panel, admin_teams_list_pending, admin_teams_list_approved, admin_teams_list_rejected, WAITING_FOR_COMMENT
from registration_status import check_registration_status


# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()
API_ID = int(os.environ.get("API_ID"))
API_HASH = os.environ.get("API_HASH")
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# Define states
(
    CHECKING_SUBSCRIPTION,
    TEAM_NAME,
    CAPTAIN_NICKNAME,
    PLAYERS_LIST,
    SUBSCRIPTION_CHECK_RESULT,  # New state
    CAPTAIN_CONTACTS,
    TOURNAMENT_INFO,
    FAQ,
    WAITING_TEAM_NAME
) = range(9)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ range(10)

# Channel ID for subscription check
CHANNEL_ID = "@m5cup"

# Pyrogram Client (UserBot)
userbot = Client(
    name="my_userbot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
    parse_mode=ParseMode.HTML
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."""
    keyboard = [
        [KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
        [KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ")],
        [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")],
        [KeyboardButton("FAQ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_registration_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç—Ç–∞–ø–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    keyboard = [
        [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_back_keyboard():
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥."""
    keyboard = [
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_subscription_result_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    keyboard = [
        [KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_confirmation_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤."""
    keyboard = [
        [KeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")],
        [KeyboardButton("üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Send welcome message and show main menu."""
    welcome_message = """üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä

"M5 Domination Cup"


–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.


üìù –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã


üéÆ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" –Ω–∏–∂–µ.
‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ".


–í–∞–∂–Ω–æ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –≥–æ—Ç–æ–≤–∞ —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ (–Ω–∏–∫–Ω–µ–π–º—ã)
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ø–∏—Ç–∞–Ω–∞ (–î–∏—Å–∫–æ—Ä–¥ –∏–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º)


–£–¥–∞—á–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ! üéØ"""

    await update.message.reply_text(welcome_message, reply_markup=get_main_keyboard())
    return ConversationHandler.END

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the registration process."""
    await update.message.reply_text(
        "üì¢ –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ M5 Domination Cup –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
        "üîó –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ [M5 Cup](https://t.me/m5cup), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".\n\n"
        "üõë –ï—Å–ª–∏ —Ç—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".",
        reply_markup=get_registration_keyboard(),
        parse_mode='Markdown'
    )
    return CHECKING_SUBSCRIPTION

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Return to main menu."""
    await update.message.reply_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

async def back_to_checking_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Return to subscription checking step."""
    await update.message.reply_text(
        "üì¢ –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ M5 Domination Cup –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
        "üîó –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ [M5 Cup](https://t.me/m5cup), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".\n\n"
        "üõë –ï—Å–ª–∏ —Ç—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".",
        reply_markup=get_registration_keyboard(),
        parse_mode='Markdown'
    )
    return CHECKING_SUBSCRIPTION

async def back_to_team_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Return to team name input step."""
    await update.message.reply_text(
        "üéÆ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã.\n\n"
        "‚úçüèº –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=get_back_keyboard()
    )
    return TEAM_NAME

async def back_to_players_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Return to players list input step."""
    await update.message.reply_text(
        "–£–∫–∞–∂–∏ —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã. –¢–µ–±–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:\n"
        "1Ô∏è‚É£ 4 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞\n"
        "2Ô∏è‚É£ –ó–∞–ø–∞—Å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
        "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç:\n"
        "üìå –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º ‚Äì @TelegramUsername\n\n"
        "üëÄ –ü—Ä–∏–º–µ—Ä:\n\n"
        "PlayerOne ‚Äì @playerone\n"
        "PlayerTwo ‚Äì @playertwo\n"
        "PlayerThree ‚Äì @playerthree\n"
        "PlayerFour ‚Äì @playerfour\n"
        "(5. –ó–∞–ø–∞—Å–Ω–æ–π ‚Äì @reserveplayer)\n\n"
        "üì© –û—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=get_back_keyboard()
    )
    return PLAYERS_LIST

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Check if user is subscribed to the channel."""
    try:
        user_id = update.message.from_user.id
        chat_member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)

        if chat_member.status in ['member', 'administrator', 'creator']:
            await update.message.reply_text(
                "üéÆ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "‚úçüèº –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
                reply_markup=get_back_keyboard()
            )
            return TEAM_NAME
        else:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @m5cup –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_registration_keyboard()
            )
            return CHECKING_SUBSCRIPTION

    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã:\n\n"
            "1. –ü–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –∫–∞–Ω–∞–ª\n"
            "2. –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
            "3. –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\"\n\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_registration_keyboard()
        )
        return CHECKING_SUBSCRIPTION

async def receive_team_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Receive and store team name, check for uniqueness, and proceed to captain nickname."""
    team_name = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    if db.team_name_exists(team_name):
        await update.message.reply_text(
            "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            reply_markup=get_back_keyboard()  # Or other appropriate keyboard
        )
        return TEAM_NAME  # Return to team name input state

    context.user_data['team_name'] = team_name

    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (—ç—Ç–æ –±—É–¥–µ—Ç —Ç–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ, –∏ —Ç—ã –±—É–¥–µ—à—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º –∫–æ–º–∞–Ω–¥—ã):\n\n"
        "‚úçüèº –ù–∞–ø–∏—à–∏ –Ω–∏–∫–Ω–µ–π–º –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=get_back_keyboard()
    )
    return CAPTAIN_NICKNAME

async def get_tg_id_by_username(username: str):
    """Gets Telegram ID by username using Pyrogram."""
    try:
        users = await userbot.get_users(username)
        if users:
            if isinstance(users, list):
                if users:
                    return users[0].id
                else:
                    return None
            else:
                return users.id
        else:
            return None
    except Exception as e:
        logger.error(f"Error getting Telegram ID for {username}: {e}")
        return None
    
async def receive_captain_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Receive captain's nickname and proceed to player list."""
    captain_nickname = update.message.text
    context.user_data['captain_nickname'] = captain_nickname

    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã (–º–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞, –Ω–µ –≤–∫–ª—é—á–∞—è –∫–∞–ø–∏—Ç–∞–Ω–∞):\n\n"
        "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç:\n"
        "üìå –ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º ‚Äì @TelegramUsername\n\n"
        "üëÄ –ü—Ä–∏–º–µ—Ä:\n\n"
        "PlayerOne ‚Äì @playerone\n"
        "PlayerTwo ‚Äì @playertwo\n"
        "PlayerThree ‚Äì @playerthree\n"
        "(4. –ó–∞–ø–∞—Å–Ω–æ–π ‚Äì @reserveplayer)\n\n"
        "üì© –û—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=get_back_keyboard()
    )
    return PLAYERS_LIST

async def check_players_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Check and validate players list and check subscription status."""
    players_text = update.message.text
    players = []
    player_pattern = re.compile(r"(.+?)\s*[-‚Äì]\s*@([a-zA-Z0-9_]+)")

    for line in players_text.split('\n'):
        match = player_pattern.match(line)
        if match:
            nickname = match.group(1).strip()
            username = match.group(2).strip()
            players.append((nickname, username))

    if len(players) < 3:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞ (–Ω–µ –≤–∫–ª—é—á–∞—è –∫–∞–ø–∏—Ç–∞–Ω–∞). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤–∞.",
            reply_markup=get_back_keyboard()
        )
        return PLAYERS_LIST

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–∞—Ö (nickname, username, telegram_id)
    players_data = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ players_data
    captain_nickname = context.user_data.get('captain_nickname')
    update_user = update.message.from_user
    players_data.append({"nickname": captain_nickname, "username": update_user.username, "telegram_id": update_user.id, 'is_captain': True})
    for nickname, username in players:
        players_data.append({"nickname": nickname, "username": username, "telegram_id": None, 'is_captain': False})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–æ–≤ –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤
    nicknames = set()
    usernames = set()
    duplicate_nicknames = []
    duplicate_usernames = []

    for player in players_data:
        if player['nickname'] in nicknames:
            duplicate_nicknames.append(player['nickname'])
        else:
            nicknames.add(player['nickname'])

        # –ü—Ä–∏–≤–æ–¥–∏–º —é–∑–µ—Ä–Ω–µ–π–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        username_lower = player['username'].lower()
        if username_lower in usernames:
            duplicate_usernames.append(player['username'])
        else:
            usernames.add(username_lower)
    
    if duplicate_nicknames or duplicate_usernames:
        error_message = "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã:\n"
        if duplicate_nicknames:
            error_message += f"–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∏–∫–Ω–µ–π–º—ã: {', '.join(duplicate_nicknames)}\n"
        if duplicate_usernames:
            error_message += f"–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —é–∑–µ—Ä–Ω–µ–π–º—ã: {', '.join(duplicate_usernames)}\n"
        
        error_message += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞."
        
        await update.message.reply_text(
            error_message,
            reply_markup=get_back_keyboard()
        )
        return PLAYERS_LIST

    context.user_data['players_data'] = players_data

    await update.message.reply_text(
        "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–∞–Ω–∞–ª. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
        reply_markup=ReplyKeyboardRemove()
    )

    unsubscribed_players = []
    subscribed_players = []

    for player in players_data:
        if player['telegram_id'] is None:
            telegram_id = await get_tg_id_by_username(player['username'])
            player['telegram_id'] = telegram_id
        else:
            telegram_id = player['telegram_id']
        if telegram_id:
            try:
                chat_member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=telegram_id)
                if chat_member.status in ['member', 'administrator', 'creator']:
                    subscribed_players.append(f"{player['nickname']} ‚Äì @{player['username']}")
                else:
                    unsubscribed_players.append(f"{player['nickname']} ‚Äì @{player['username']}")
            except Exception as e:
                logger.error(f"Error checking subscription for user {telegram_id} (Bot API): {e}")
                if "Participant_id_invalid" in str(e):
                    unsubscribed_players.append(f"{player['nickname']} ‚Äì @{player['username']} (–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏)")
                else:
                    unsubscribed_players.append(f"{player['nickname']} ‚Äì @{player['username']} (–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏)")


        else:
            unsubscribed_players.append(f"{player['nickname']} ‚Äì @{player['username']} (–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞)")

    if unsubscribed_players:
        message = "‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @m5cup –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö –ø–æ–¥–ø–∏—Å–∫—É:\n"
        for player in unsubscribed_players:
            message += f"‚Ä¢ {player}\n"
        message += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–≥–ª–∏ –Ω–µ –ø—Ä–æ–π—Ç–∏ –∏–∑-–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    else:
        message = "‚úÖ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @m5cup!"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data['subscription_message'] = message
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö, –≤–∫–ª—é—á–∞—è telegram_id
    context.user_data['players_data'] = players_data

    await update.message.reply_text(message, reply_markup=get_subscription_result_keyboard())
    return SUBSCRIPTION_CHECK_RESULT

async def handle_subscription_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle user's choice after subscription check."""
    choice = update.message.text

    if choice == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        await update.message.reply_text(
            "üìû –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üí¨ –ù–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ Telegram –∏–ª–∏ Discord –∫–∞–ø–∏—Ç–∞–Ω–∞.\n\n"
            "üëÄ –ü—Ä–∏–º–µ—Ä:\n"
            "üìå Telegram: @CaptainUsername\n"
            "–∏–ª–∏\n"
            "üìå Discord: Captain#1234",
            reply_markup=get_back_keyboard()
        )
        return CAPTAIN_CONTACTS
    elif choice == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_back_keyboard()
        )
        return PLAYERS_LIST
    else:
        # Handle unexpected input (optional)
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.",
            reply_markup=get_subscription_result_keyboard()
        )
        return SUBSCRIPTION_CHECK_RESULT

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle player list confirmation."""
    user_choice = update.message.text
    
    if user_choice == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        await update.message.reply_text(
            "üìû –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üí¨ –ù–∞–ø–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ Telegram –∏–ª–∏ Discord –∫–∞–ø–∏—Ç–∞–Ω–∞.\n\n"
            "üëÄ –ü—Ä–∏–º–µ—Ä:\n"
            "üìå Telegram: @CaptainUsername\n"
            "–∏–ª–∏\n"
            "üìå Discord: Captain#1234",
            reply_markup=get_back_keyboard()
        )
        return CAPTAIN_CONTACTS
    
    elif user_choice == "üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ":
        await update.message.reply_text(
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–Ω–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "PlayerOne ‚Äì @playerone\n"
            "PlayerTwo ‚Äì @playertwo\n"
            "PlayerThree ‚Äì @playerthree\n"
            "PlayerFour ‚Äì @playerfour\n"
            "(5. –ó–∞–ø–∞—Å–Ω–æ–π ‚Äì @reserveplayer)",
            reply_markup=get_back_keyboard()
        )
        return PLAYERS_LIST
    
    elif user_choice == "–ù–∞–∑–∞–¥":
        return await back_to_players_list(update, context)

async def finish_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Complete the registration process."""
    captain_contact = update.message.text
    context.user_data['captain_contact'] = captain_contact

    team_name = context.user_data.get('team_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    players_data = context.user_data.get('players_data', [])

    try:
        team_id = db.register_team(
            team_name=team_name,
            players=players_data,
            captain_contact=captain_contact
        )
        logger.info(f"Team '{team_name}' registered successfully with ID: {team_id}")

    except Exception as e:
        logger.error(f"Error saving team data to database: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    registration_info = (
        f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ M5 Domination Cup!\n\n"
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
        f"üéÆ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {team_name}\n\n"
        f"üë• –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:\n"
    )

    for player in players_data:
        registration_info += f"  - üéÆ {player['nickname']} (@{player['username']}) {'(–ö–∞–ø–∏—Ç–∞–Ω)' if player['is_captain'] else ''}\n"

    registration_info += f"\nüë®‚Äç‚úàÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–∞–ø–∏—Ç–∞–Ω–∞: {captain_contact}\n\n"
    registration_info += "üì¢ –í—Å–∫–æ—Ä–µ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –∫–∞–ø–∏—Ç–∞–Ω–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è.\n\n"
    registration_info += "üî• –£–¥–∞—á–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ! üéÆüèÜ"

    await update.message.reply_text(registration_info, reply_markup=get_main_keyboard())
    return ConversationHandler.END

async def tournament_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show tournament information."""
    await update.message.reply_text(
        "üèÜ M5 Domination Cup\n\n"
        "üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.",
        reply_markup=get_back_keyboard()
    )
    return TOURNAMENT_INFO

# async def registration_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """Check registration status."""
#     await update.message.reply_text(
#         "üîç –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ.",
#         reply_markup=get_back_keyboard()
#     )
#     return REGISTRATION_STATUS

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show FAQ."""
    await update.message.reply_text(
        "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.",
        reply_markup=get_back_keyboard()
    )
    return FAQ

async def post_init(application: Application):
    """Post initialization hook to start the Pyrogram client."""
    print("Starting Pyrogram client...")
    await userbot.start()
    print("Pyrogram client started.")


def main() -> None:
    """Start the bot."""
    application = Application.builder().token(BOT_TOKEN).post_init(post_init).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ bot_data, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    application.bot_data['db'] = db

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    admin_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("admin", admin_command)],
    states={
        WAITING_FOR_COMMENT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, process_comment),
            CallbackQueryHandler(cancel_comment, pattern="^cancel_comment$")
        ],
        # –î–æ–±–∞–≤—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é –∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        ConversationHandler.WAITING: [  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WAITING –≤–º–µ—Å—Ç–æ END
            CallbackQueryHandler(admin_teams_menu, pattern="^admin_teams_menu$"),
            CallbackQueryHandler(admin_teams_list_pending, pattern="^admin_teams_list_pending$"),
            CallbackQueryHandler(admin_teams_list_approved, pattern="^admin_teams_list_approved$"),
            CallbackQueryHandler(admin_teams_list_rejected, pattern="^admin_teams_list_rejected$"),
            CallbackQueryHandler(handle_team_action, pattern="^(approve|reject|comment)_team_"),
            CallbackQueryHandler(admin_panel, pattern="^admin_panel$"),
        ],
    },
    fallbacks=[CommandHandler("admin", admin_command)],
    # –î–æ–±–∞–≤—å—Ç–µ map_to_parent –µ—Å–ª–∏ –≤—ã –≤–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ —ç—Ç–æ—Ç ConversationHandler –≤ –¥—Ä—É–≥–æ–π
    map_to_parent={
        ConversationHandler.END: ConversationHandler.END,
    }
)

    application.add_handler(admin_conv_handler)

    # –û–±–Ω–æ–≤–ª—è–µ–º ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.Regex('^–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è$'), start_registration),
            MessageHandler(filters.Regex('^–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ$'), tournament_info),
            MessageHandler(filters.Regex('^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏$'), check_registration_status),  # Use the function directly
            MessageHandler(filters.Regex('^FAQ$'), faq),
        ],
        states={
            CHECKING_SUBSCRIPTION: [
                MessageHandler(filters.Regex('^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É$'), check_subscription),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), back_to_main),
            ],
            TEAM_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–ù–∞–∑–∞–¥$'), receive_team_name),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), back_to_checking_subscription),
            ],
            CAPTAIN_NICKNAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–ù–∞–∑–∞–¥$'), receive_captain_nickname),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), back_to_team_name),
            ],
            PLAYERS_LIST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–ù–∞–∑–∞–¥$'), check_players_subscription),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), back_to_team_name),
            ],
            SUBSCRIPTION_CHECK_RESULT: [
                MessageHandler(filters.Regex('^–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å$|^–ù–∞–∑–∞–¥$'), handle_subscription_result),
            ],
            CAPTAIN_CONTACTS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex('^–ù–∞–∑–∞–¥$'), finish_registration),
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), back_to_players_list),
            ],
            TOURNAMENT_INFO: [
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), back_to_main),
            ],
            FAQ: [
                MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), back_to_main),
            ],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    application.add_handler(conv_handler)

    # Start the Bot
    application.run_polling()
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Pyrogram –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    asyncio.run(userbot.stop())

if __name__ == '__main__':
    main()
