from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, ConversationHandler
from database import Database

db = Database()

# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
WAITING_FOR_COMMENT = 1

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    if not db.is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–ª—è –Ω–µ–∞–¥–º–∏–Ω–æ–≤

    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="admin_teams_menu")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_admin")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º WAITING –≤–º–µ—Å—Ç–æ None
    return ConversationHandler.WAITING

async def admin_teams_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥."""
    query = update.callback_query
    if not db.is_admin(query.from_user.id):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ConversationHandler.END

    pending_count = db.get_teams_count_by_status("pending")
    approved_count = db.get_teams_count_by_status("approved")
    rejected_count = db.get_teams_count_by_status("rejected")

    keyboard = [
        [InlineKeyboardButton(f"–û–∂–∏–¥–∞—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã - {pending_count}", callback_data="admin_teams_list_pending")] if pending_count > 0 else [InlineKeyboardButton("–û–∂–∏–¥–∞—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="admin_teams_list_pending")],
        [InlineKeyboardButton(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - {approved_count}", callback_data="admin_teams_list_approved")] if approved_count > 0 else [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="admin_teams_list_approved")],
        [InlineKeyboardButton(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - {rejected_count}", callback_data="admin_teams_list_rejected")] if rejected_count > 0 else [InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="admin_teams_list_rejected")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=reply_markup)
    await query.answer()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º WAITING
    return ConversationHandler.WAITING

async def admin_teams_list(update: Update, context: ContextTypes.DEFAULT_TYPE, status: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º."""
    query = update.callback_query
    if not db.is_admin(query.from_user.id):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    teams = db.get_all_teams_by_status(status)

    if not teams:
        await query.edit_message_text(f"–ù–µ—Ç –∫–æ–º–∞–Ω–¥ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'.")
        return

    for team in teams:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_team_{team['id']}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_team_{team['id']}")
            ],
            [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_team_{team['id']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        players_list = "\n".join([f"‚Ä¢ {p[0]} ‚Äì {p[1]}" for p in team['players']])
        message = (
            f"üéÆ –ö–æ–º–∞–Ω–¥–∞: {team['team_name']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {team['registration_date']}\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞: {team['captain_contact']}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {team['status']}\n"
            f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {team['admin_comment'] or '–ù–µ—Ç'}\n\n"
            f"üë• –ò–≥—Ä–æ–∫–∏:\n{players_list}"
        )

        await query.message.reply_text(message, reply_markup=reply_markup)

    await query.answer()

async def handle_team_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    query = update.callback_query
    if not db.is_admin(query.from_user.id):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ConversationHandler.END

    action, team_id = query.data.split('_')[0], int(query.data.split('_')[2])

    if action == "approve":
        db.update_team_status(team_id, "approved")
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")

    elif action == "reject":
        db.update_team_status(team_id, "rejected")
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")

    elif action == "comment":
        context.user_data['commenting_team'] = team_id
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_comment")
            ]])
        )
        return WAITING_FOR_COMMENT

    await query.answer()


async def cancel_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω.")
    context.user_data.pop('commenting_team', None)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
    await admin_teams_menu(update, context)
    return ConversationHandler.END

async def process_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
    team_id = context.user_data.get('commenting_team')
    if not team_id:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
        return ConversationHandler.END

    comment = update.message.text
    db.update_team_comment(team_id, comment)
    await update.message.reply_text(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å ID {team_id} –¥–æ–±–∞–≤–ª–µ–Ω: {comment}")
    context.user_data.pop('commenting_team', None)
    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await admin_teams_menu(update, context)
    return ConversationHandler.END


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    query = update.callback_query
    if not db.is_admin(query.from_user.id):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="admin_teams_menu")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_admin")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    await query.answer()

async def admin_teams_list_pending(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–º–∞–Ω–¥."""
    await admin_teams_list(update, context, "pending")

async def admin_teams_list_approved(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await admin_teams_list(update, context, "approved")

async def admin_teams_list_rejected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await admin_teams_list(update, context, "rejected")
